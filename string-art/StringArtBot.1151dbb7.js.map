{"mappings":"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","sources":["src/string-art/js/stringAtrBot.js","src/string-art/js/speaker.js"],"sourcesContent":["import { speak } from \"./speaker\";\nexport const PARAMS = {\n  COUNT_POINTS: 100,\n  DELAY_TIME: 5,\n};\nconst refs = {\n  formElem: document.querySelector(\".js-form\"),\n  form1Elem: document.querySelector(\".js-form1\"),\n  canvas: document.querySelector(\"canvas\"),\n  btnElems: document.querySelector(\".js-btn\"),\n  visibleBtn: document.querySelector(\".js-visible-canvas\"),\n};\nconst ctx = refs.canvas.getContext(\"2d\");\nctx.lineWidth = 1;\nlet arrPoints = [];\n\nconst drawPoints = {\n  currentPoint: 0,\n};\n\nrefs.visibleBtn.addEventListener(\"change\", (e) => {\n  if (e.target.checked) {\n    refs.canvas.style.visibility = \"hidden\";\n  } else {\n    refs.canvas.style.visibility = \"\";\n  }\n});\n\nrefs.formElem.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  const data = e.target.elements.data.value;\n  if (data) {\n    loadData(data);\n  } else {\n    loadPoint();\n  }\n});\nrefs.form1Elem.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  const point = Number(e.target.elements.point.value);\n  const count = Number(e.target.elements.count.value);\n  const delay = Number(e.target.elements.delay.value);\n  PARAMS.COUNT_POINTS = count || PARAMS.COUNT_POINTS;\n  PARAMS.DELAY_TIME = delay || PARAMS.DELAY_TIME;\n  setPoint(point || drawPoints.currentPoint);\n});\n\ndocument.body.addEventListener(\"keydown\", (e) => {\n  if (e.code === \"Enter\") {\n    loadPoint();\n  } else if (e.code === \"ArrowLeft\") {\n    prevPoint();\n  } else if (e.code === \"ArrowRight\" || e.code === \"Space\") {\n    nextPoint();\n  }\n});\n\nfunction loadPoint() {\n  drawPoints.currentPoint = 0;\n  if (arrPoints.length === 0) {\n    arrPoints = JSON.parse(localStorage.getItem(\"dataPoint\"));\n    drawPoints.currentPoint = Number(localStorage.getItem(\"lastPoint\"));\n  }\n  draw();\n}\nexport function nextPoint() {\n  drawPoints.currentPoint++;\n  draw();\n}\nexport function prevPoint() {\n  drawPoints.currentPoint--;\n  draw();\n}\n\nfunction saveData() {\n  localStorage.setItem(\"points\", JSON.stringify(drawPoints));\n  localStorage.setItem(\"lastPoint\", drawPoints.currentPoint);\n}\nfunction loadData(dataString) {\n  arrPoints = dataString.split(\"\\n\");\n  localStorage.setItem(\"dataPoint\", JSON.stringify(arrPoints));\n  localStorage.setItem(\"lastPoint\", 0);\n}\n\nfunction draw() {\n  saveData();\n  const prevPoint = +(arrPoints[drawPoints.currentPoint - 1] || 0);\n  const currentPoint = +(arrPoints[drawPoints.currentPoint] || 0);\n  const nextPoint = +(arrPoints[drawPoints.currentPoint + 1] || 0);\n\n  refs.form1Elem.elements.point.value = drawPoints.currentPoint;\n  // drawLine(\n  //   ctx,\n  //   currentPoint,\n  //   nextPoint,\n  //   COUNT_POINTS,\n  //   { x: refs.canvas.width / 2, y: refs.canvas.height / 2 },\n  //   refs.canvas.width / 2 - 5\n  // );\n  ctx.clearRect(0, 0, refs.canvas.width, refs.canvas.height);\n  drawCircle(\n    ctx,\n    refs.canvas.width / 2 - 5,\n    PARAMS.COUNT_POINTS,\n    { x: refs.canvas.width / 2, y: refs.canvas.height / 2 },\n    prevPoint,\n    currentPoint,\n    nextPoint\n  );\n\n  try {\n    speak(arrPoints[drawPoints.currentPoint]);\n  } catch {\n    console.log(\"err\");\n  }\n  drawText(\n    ctx,\n    prevPoint,\n    {\n      x: refs.canvas.width / 2,\n      y: refs.canvas.height / 2 - 200,\n    },\n    40\n  );\n  drawText(ctx, currentPoint, {\n    x: refs.canvas.width / 2,\n    y: refs.canvas.height / 2,\n  });\n  drawText(\n    ctx,\n    nextPoint,\n    {\n      x: refs.canvas.width / 2,\n      y: refs.canvas.height / 2 + 200,\n    },\n    40\n  );\n}\n\nfunction drawText(ctx, point, { x, y }, font = 100) {\n  ctx.fillStyle = \"black\";\n  ctx.font = `${font}px serif`;\n  ctx.textAlign = \"center\";\n  ctx.fillText(point, x, y);\n}\n\nfunction drawCircle(ctx, r, countPoint, center, ...points) {\n  const radian = (Math.PI * 2) / countPoint;\n\n  for (let i = 0; i < countPoint; i++) {\n    let angle =\n      radian *\n      (PARAMS.COUNT_POINTS - (i - Math.round(PARAMS.COUNT_POINTS / 4)));\n    const endPoint = {\n      x: r * Math.sin(angle) + center.x,\n      y: r * Math.cos(angle) + center.y,\n    };\n\n    const minR = i % 10 == 0 ? 4 : 2;\n    ctx.fillStyle = \"black\";\n    ctx.beginPath();\n    ctx.ellipse(endPoint.x, endPoint.y, minR, minR, 0, 0, Math.PI * 2);\n    ctx.fill();\n  }\n\n  for (let i = 0; i < points.length; i++) {\n    let angle =\n      radian *\n      (PARAMS.COUNT_POINTS -\n        (+points[i] - Math.round(PARAMS.COUNT_POINTS / 4)));\n    const endPoint = {\n      x: r * Math.sin(angle) + center.x,\n      y: r * Math.cos(angle) + center.y,\n    };\n    let minR = 5;\n    switch (i) {\n      case 0:\n        ctx.fillStyle = \"green\";\n        break;\n      case 1:\n        ctx.fillStyle = \"red\";\n        minR = 15;\n        break;\n      case 2:\n        ctx.fillStyle = \"blue\";\n        break;\n    }\n\n    ctx.beginPath();\n    ctx.ellipse(endPoint.x, endPoint.y, minR, minR, 0, 0, Math.PI * 2);\n    ctx.fill();\n  }\n}\n\nfunction drawLine(ctx, currentPoint, nextPoint, countPoint, center, r) {\n  // currentPoint -= 60;\n  // nextPoint -= 60;\n\n  const radian = (Math.PI * 2) / countPoint;\n\n  const startPoint = {\n    x: r * Math.sin(radian * currentPoint) + center.x,\n    y: r * Math.cos(radian * currentPoint) + center.y,\n  };\n  const endPoint = {\n    x: r * Math.sin(radian * nextPoint) + center.x,\n    y: r * Math.cos(radian * nextPoint) + center.y,\n  };\n\n  ctx.beginPath(); // Start a new path\n  ctx.moveTo(startPoint.x, startPoint.y); // Move the pen to (30, 50)\n  ctx.lineTo(endPoint.x, endPoint.y); // Draw a line to (150, 100)\n  ctx.stroke();\n}\n\nfunction setPoint(point) {\n  drawPoints.currentPoint = point;\n  draw();\n}\n\nrefs.btnElems.addEventListener(\"click\", (e) => {\n  if (e.target != e.currentTarget) {\n    const btn = e.target.closest(\"button\");\n    const value = btn.dataset.value;\n\n    if (value == \"prev\") {\n      prevPoint();\n    } else {\n      nextPoint();\n    }\n  }\n});\n\nrefs.canvas.addEventListener(\"click\", () => {\n  nextPoint();\n});\n","const lang = \"ru-RU\"; // Задаём стандартный язык произношения\n\nexport function speak(text) {\n  // Функция речи\n  var speech = window.speechSynthesis, // Объявляем переменные\n    voice = \"\",\n    ourvoice = []; // Сюда будем складывать доступные звуки браузера\n  if (0 === ourvoice.length) {\n    // Если равно нулю, то...\n    var voices = speech.getVoices(); // Получаем все языки\n  }\n  for (var i = 0; i < voices.length; i++) {\n    // Находим указанный в списке\n    if (lang == voices[i].lang) {\n      voice = voices[i]; // Ставим язык как параметр\n    }\n  }\n  var readme = new SpeechSynthesisUtterance(text); // вводим текст\n  readme.voice = voice; // Задаём язык произношения\n  speech.speak(readme); // Произносим\n}\n"],"names":["$323HL","parcelRequire","$92ecf229b72c67c2$export$f80c391eaed27b3","COUNT_POINTS","DELAY_TIME","$92ecf229b72c67c2$var$refs","formElem","document","querySelector","form1Elem","canvas","btnElems","visibleBtn","$92ecf229b72c67c2$var$ctx","getContext","lineWidth","$92ecf229b72c67c2$var$arrPoints","$92ecf229b72c67c2$var$drawPoints","currentPoint","$92ecf229b72c67c2$var$loadPoint","length","JSON","parse","localStorage","getItem","Number","$92ecf229b72c67c2$var$draw","$92ecf229b72c67c2$export$774686540851c750","$92ecf229b72c67c2$export$844734d48b83ae92","setItem","stringify","prevPoint","nextPoint","elements","point","value","clearRect","width","height","ctx","r","countPoint","center","points","radian","Math","PI","i","angle","round","endPoint","x","sin","y","cos","minR","fillStyle","beginPath","ellipse","fill","i1","angle1","endPoint1","minR1","$92ecf229b72c67c2$var$drawCircle","speak","console","log","$92ecf229b72c67c2$var$drawText","font","textAlign","fillText","addEventListener","e","target","checked","style","visibility","preventDefault","data","split","count","delay","$92ecf229b72c67c2$var$setPoint","body","code","currentTarget","closest","dataset","$23546ebca3bd5893$export$e62e8864abfee904","text","speech","window","speechSynthesis","voice","voices","getVoices","lang","readme","SpeechSynthesisUtterance"],"version":3,"file":"StringArtBot.1151dbb7.js.map"}