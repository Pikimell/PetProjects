{"mappings":"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","sources":["src/string-art/js/speaker.js","src/string-art/js/stringAtrBot.js"],"sourcesContent":["const lang = \"ru-RU\"; // Задаём стандартный язык произношения\n\nexport function speak(text) {\n  // Функция речи\n  var speech = window.speechSynthesis, // Объявляем переменные\n    voice = \"\",\n    ourvoice = []; // Сюда будем складывать доступные звуки браузера\n  if (0 === ourvoice.length) {\n    // Если равно нулю, то...\n    var voices = speech.getVoices(); // Получаем все языки\n  }\n  for (var i = 0; i < voices.length; i++) {\n    // Находим указанный в списке\n    if (lang == voices[i].lang) {\n      voice = voices[i]; // Ставим язык как параметр\n    }\n  }\n  var readme = new SpeechSynthesisUtterance(text); // вводим текст\n  readme.voice = voice; // Задаём язык произношения\n  speech.speak(readme); // Произносим\n}\n","import { speak } from \"./speaker\";\nconst refs = {\n  formElem: document.querySelector(\".js-form\"),\n  form1Elem: document.querySelector(\".js-form1\"),\n  canvas: document.querySelector(\"canvas\"),\n  btnElems: document.querySelector(\".js-btn\"),\n};\nconst ctx = refs.canvas.getContext(\"2d\");\nctx.lineWidth = 1;\nlet arrPoints = [];\n\nconst drawPoints = {\n  currentPoint: 0,\n};\n\nrefs.formElem.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  const data = e.target.elements.data.value;\n  loadData(data);\n});\nrefs.form1Elem.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  const point = Number(e.target.elements.point.value);\n  setPoint(point);\n});\n\ndocument.body.addEventListener(\"keydown\", (e) => {\n  if (e.code === \"Enter\") {\n    loadPoint();\n  } else if (e.code === \"ArrowLeft\") {\n    prevPoint();\n  } else if (e.code === \"ArrowRight\" || e.code === \"Space\") {\n    nextPoint();\n  }\n});\n\nfunction loadPoint() {\n  drawPoints.currentPoint = 0;\n  if (arrPoints.length === 0) {\n    arrPoints = JSON.parse(localStorage.getItem(\"dataPoint\"));\n    drawPoints.currentPoint = Number(localStorage.getItem(\"lastPoint\"));\n  }\n  draw();\n}\nfunction nextPoint() {\n  drawPoints.currentPoint++;\n  draw();\n}\nfunction prevPoint() {\n  drawPoints.currentPoint--;\n  draw();\n}\n\nfunction saveData() {\n  localStorage.setItem(\"points\", JSON.stringify(drawPoints));\n  localStorage.setItem(\"lastPoint\", drawPoints.currentPoint);\n}\nfunction loadData(dataString) {\n  arrPoints = dataString.split(\"\\n\");\n  localStorage.setItem(\"dataPoint\", JSON.stringify(arrPoints));\n  localStorage.setItem(\"lastPoint\", 0);\n}\n\nfunction draw() {\n  saveData();\n  const prevPoint = +(arrPoints[drawPoints.currentPoint - 1] || 0);\n  const currentPoint = +(arrPoints[drawPoints.currentPoint] || 0);\n  const nextPoint = +(arrPoints[drawPoints.currentPoint + 1] || 0);\n\n  refs.form1Elem.elements.point.value = drawPoints.currentPoint;\n  // drawLine(\n  //   ctx,\n  //   currentPoint,\n  //   nextPoint,\n  //   300,\n  //   { x: refs.canvas.width / 2, y: refs.canvas.height / 2 },\n  //   refs.canvas.width / 2 - 5\n  // );\n  ctx.clearRect(0, 0, refs.canvas.width, refs.canvas.height);\n  drawCircle(\n    ctx,\n    refs.canvas.width / 2 - 5,\n    300,\n    { x: refs.canvas.width / 2, y: refs.canvas.height / 2 },\n    prevPoint,\n    currentPoint,\n    nextPoint\n  );\n\n  try {\n    speak(arrPoints[drawPoints.currentPoint]);\n  } catch {\n    console.log(\"err\");\n  }\n  drawText(\n    ctx,\n    prevPoint,\n    {\n      x: refs.canvas.width / 2,\n      y: refs.canvas.height / 2 - 200,\n    },\n    40\n  );\n  drawText(ctx, currentPoint, {\n    x: refs.canvas.width / 2,\n    y: refs.canvas.height / 2,\n  });\n  drawText(\n    ctx,\n    nextPoint,\n    {\n      x: refs.canvas.width / 2,\n      y: refs.canvas.height / 2 + 200,\n    },\n    40\n  );\n}\n\nfunction drawText(ctx, point, { x, y }, font = 100) {\n  ctx.fillStyle = \"black\";\n  ctx.font = `${font}px serif`;\n  ctx.textAlign = \"center\";\n  ctx.fillText(point, x, y);\n}\n\nfunction drawCircle(ctx, r, countPoint, center, ...points) {\n  const radian = (Math.PI * 2) / countPoint;\n\n  for (let i = 0; i < countPoint; i++) {\n    let angle = radian * i;\n    const endPoint = {\n      x: r * Math.sin(angle) + center.x,\n      y: r * Math.cos(angle) + center.y,\n    };\n\n    const minR = i % 10 == 0 ? 4 : 2;\n    ctx.fillStyle = \"black\";\n    ctx.beginPath();\n    ctx.ellipse(endPoint.x, endPoint.y, minR, minR, 0, 0, Math.PI * 2);\n    ctx.fill();\n  }\n\n  for (let i = 0; i < points.length; i++) {\n    let angle = radian * (countPoint - +points[i]);\n    // angle += Math.round(countPoint / 4);\n    const endPoint = {\n      x: r * Math.sin(angle) + center.x,\n      y: r * Math.cos(angle) + center.y,\n    };\n    let minR = 5;\n    switch (i) {\n      case 0:\n        ctx.fillStyle = \"green\";\n        break;\n      case 1:\n        ctx.fillStyle = \"red\";\n        minR = 15;\n        break;\n      case 2:\n        ctx.fillStyle = \"blue\";\n        break;\n    }\n\n    ctx.beginPath();\n    ctx.ellipse(endPoint.x, endPoint.y, minR, minR, 0, 0, Math.PI * 2);\n    ctx.fill();\n  }\n}\n\nfunction drawLine(ctx, currentPoint, nextPoint, countPoint, center, r) {\n  currentPoint -= 60;\n  nextPoint -= 60;\n\n  const radian = (Math.PI * 2) / countPoint;\n\n  const startPoint = {\n    x: r * Math.sin(radian * currentPoint) + center.x,\n    y: r * Math.cos(radian * currentPoint) + center.y,\n  };\n  const endPoint = {\n    x: r * Math.sin(radian * nextPoint) + center.x,\n    y: r * Math.cos(radian * nextPoint) + center.y,\n  };\n\n  ctx.beginPath(); // Start a new path\n  ctx.moveTo(startPoint.x, startPoint.y); // Move the pen to (30, 50)\n  ctx.lineTo(endPoint.x, endPoint.y); // Draw a line to (150, 100)\n  ctx.stroke();\n}\n\nfunction setPoint(point) {\n  drawPoints.currentPoint = point;\n  draw();\n}\n\nrefs.btnElems.addEventListener(\"click\", (e) => {\n  if (e.target != e.currentTarget) {\n    const btn = e.target.closest(\"button\");\n    const value = btn.dataset.value;\n\n    if (value == \"prev\") {\n      prevPoint();\n    } else {\n      nextPoint();\n    }\n  }\n});\n"],"names":["$95b605446b060f58$export$e62e8864abfee904","text","speech","window","speechSynthesis","voice","length","voices","getVoices","i","lang","readme","SpeechSynthesisUtterance","speak","$c8b4005971d56ebc$var$refs","formElem","document","querySelector","form1Elem","canvas","btnElems","$c8b4005971d56ebc$var$ctx","getContext","lineWidth","$c8b4005971d56ebc$var$arrPoints","$c8b4005971d56ebc$var$drawPoints","currentPoint","$c8b4005971d56ebc$var$nextPoint","$c8b4005971d56ebc$var$draw","$c8b4005971d56ebc$var$prevPoint","localStorage","setItem","JSON","stringify","prevPoint","nextPoint","elements","point","value","clearRect","width","height","ctx","r","countPoint","center","points","radian","Math","PI","angle","endPoint","x","sin","y","cos","minR","fillStyle","beginPath","ellipse","fill","i1","angle1","endPoint1","minR1","$c8b4005971d56ebc$var$drawCircle","console","log","$c8b4005971d56ebc$var$drawText","font","textAlign","fillText","addEventListener","e","preventDefault","data","target","split","$c8b4005971d56ebc$var$setPoint","Number","body","code","parse","getItem","$c8b4005971d56ebc$var$loadPoint","currentTarget","closest","dataset"],"version":3,"file":"StringArtBot.403bcaf2.js.map"}