function StringArtGenerator(t){this.InitCanvas(t),this.InitSelectButton(),this.InitControls(),this.InitSave(),this.InitEvents()}StringArtGenerator.prototype.SelectImage=function(t){let i=this.fileInput.files;if(1!=i.length)return;let e=new Image;e.onload=()=>this.LoadImage(e),e.src=URL.createObjectURL(i[0]),this.fileInput.value=""},StringArtGenerator.prototype.LoadImage=function(t){this.image=t,this.isLineDrawing=!1,this.Reset(),void 0!==this.formType&&this.formType!=IMAGE_FORM||(this.formType=this.formTypeBox.value,this.InitNails()),this.generateBtn.removeAttribute("disabled")},StringArtGenerator.prototype.UpdateForm=function(){let t=this.formType!=this.formTypeBox.value;this.formType=this.formTypeBox.value,this.InitBbox(),this.DrawLoadedImage(),t&&this.InitNails()},StringArtGenerator.prototype.ToSignString=function(t){return t>0?`+${t}`:t<0?"-"+-t:"0"},StringArtGenerator.prototype.UpdateContrast=function(){let t=+this.contrastBox.value,i=1+t/100;this.contrastValue.innerHTML=this.ToSignString(t),this.contrastTable=[];for(let t=0;t<256;t++)this.contrastTable[t]=this.LimitPixel((t-128)*i+128)},StringArtGenerator.prototype.UpdateBrightness=function(){let t=1+ +this.brightnessBox.value/100;this.brightnessValue.innerHTML=this.ToSignString(+this.brightnessBox.value),this.brightnessTable=[];for(let i=0;i<256;i++)this.brightnessTable[i]=this.LimitPixel(i*t)},StringArtGenerator.prototype.UpdateWeight=function(){let t=+this.linesWeightBox.value;this.linesWeightValue.innerHTML=`${t}%`},StringArtGenerator.prototype.GetPixels=function(){this.pixelCtx.drawImage(this.canvas,0,0,this.width,this.height);let t=this.pixelCtx.getImageData(0,0,this.width,this.height).data,i=[];for(let e=0;e<t.length;e+=4)i.push(this.GetLightness(t[e],t[e+1],t[e+2]));return i},StringArtGenerator.prototype.GetLineLightness=function(t){let i=0;for(let e of t)i+=this.pixels[e];return i/t.size},StringArtGenerator.prototype.GetNextNail=function(t){let i=t,e=null,n=1/0;for(let r=0;r<this.nails.length;r++){if(r==t)continue;let s=this.LineRasterization(this.nails[r].x,this.nails[r].y,this.nails[t].x,this.nails[t].y),o=this.GetLineLightness(s);o<n&&(n=o,i=r,e=s)}return console.log(`${t} --\x3e ${i}`),{nail:i,line:e}},StringArtGenerator.prototype.RemoveLine=function(t,i){for(let e of t)this.pixels[e]=Math.min(255,this.pixels[e]+i*this.dpr)},StringArtGenerator.prototype.TimeToString=function(t){let i=(""+(t=Math.floor(t))%1e3).padStart(3,"0"),e=(""+Math.floor(t/1e3)%60).padStart(2,"0");return`${`${Math.floor(t/6e4)}`.padStart(2,"0")}:${e}.${i}`},StringArtGenerator.prototype.ShowInfo=function(t,i,e){let n=performance.now(),r=this.TimeToString(n-e),s=this.TimeToString((n-e)/(i-t)*t),o=((n-e)/(i-t)).toFixed(2);this.infoBox.innerHTML=`<b>Осталось линий:</b> ${t}<br>`,this.infoBox.innerHTML+=`<b>Прошло времени:</b> ${r}<br>`,this.infoBox.innerHTML+=`<b>Осталось времени:</b> ${s}<br>`,this.infoBox.innerHTML+=`<b>Ср. время линии:</b> ${o} мс`},StringArtGenerator.prototype.GetActions=function(){let t="<b>Основные действия:</b><br>";return"ontouchstart"in window?(t+="<b>Масштабирование</b> - щипок<br>",t+="<b>Перемещение</b> - касание"):(t+="<b>Масштабирование</b> - скроллинг<br>",t+="<b>Перемещение</b> - левая кнопка мыши"),t},StringArtGenerator.prototype.GetLineWeight=function(){return this.LimitPixel(+this.linesWeightBox.value/100*255)},StringArtGenerator.prototype.GetLineColor=function(){return`${this.linesColorBox.value}${this.GetLineWeight().toString(16).padStart(2,"0")}`},StringArtGenerator.prototype.ResetImage=function(){this.imgWidth=this.image.width,this.imgHeight=this.image.height;let t=this.imgWidth/this.imgHeight;this.imgWidth>this.imgHeight?(this.imgWidth=this.width,this.imgHeight=Math.round(this.width/t)):(this.imgHeight=this.height,this.imgWidth=Math.round(this.imgHeight*t)),this.imgX=0,this.imgY=0,this.imgScale=1,this.InitBbox()},StringArtGenerator.prototype.Reset=function(t=!0){t&&this.ResetImage(),this.saveBox.style.display="none",this.infoBox.innerHTML=this.GetActions(),this.isGenerating=!1,this.isLineDrawing=!1;for(let t of this.controls)t.removeAttribute("disabled");this.DrawLoadedImage()},StringArtGenerator.prototype.StartGenerate=function(){if(this.isGenerating=!this.isGenerating,this.isGenerating){this.saveBox.style.display="none",this.infoBox.innerHTML="",this.isLineDrawing||(this.sequence=[],this.DrawLoadedImage(),this.pixels=this.GetPixels(),this.isLineDrawing=!0,this.Clear(this.ctx),this.DrawNails());for(let t of this.controls)t.setAttribute("disabled","");this.generateBtn.value="Прервать"}},StringArtGenerator.prototype.EndGenerate=function(){this.saveBox.style.display="",this.isGenerating=!1,this.generateBtn.value="Запустить",this.resetBtn.removeAttribute("disabled"),this.selectBtn.removeAttribute("disabled"),this.linesCountBox.removeAttribute("disabled")},StringArtGenerator.prototype.GenerateIteration=function(t,i,e,n,r,s){if(this.sequence.push(t),this.ShowInfo(i,e,s),0==i||!this.isGenerating)return void this.EndGenerate();let o=this.GetNextNail(t);this.RemoveLine(o.line,n),this.DrawLine(this.nails[t],this.nails[o.nail],r),window.requestAnimationFrame((()=>this.GenerateIteration(o.nail,i-1,e,n,r,s)))},StringArtGenerator.prototype.Generate=function(){this.StartGenerate();let t=+this.linesCountBox.value,i=this.GetLineWeight(),e=this.GetLineColor(),n=performance.now();this.GenerateIteration(0,t,t,i,e,n)},StringArtGenerator.prototype.ToStringArt=function(){return JSON.stringify({nails:this.nails,color:this.GetLineColor(),background:this.backgroundColorBox.value,sequence:this.sequence},null,"    ")},StringArtGenerator.prototype.ToSVG=function(){let t=`<svg viewBox="0 0 ${this.width} ${this.height}" width="512" height="512" version="1.1" xmlns="http://www.w3.org/2000/svg">\n`;if(this.formType==CIRCLE_FORM)t+=`    <circle cx="${this.x0}" cy="${this.y0}" r="${this.radius+PADDING/2}" fill="${this.backgroundColorBox.value}" />\n`;else{t+=`    <rect x="${this.imgBbox.xmin}" y="${this.imgBbox.ymin}" width="${this.imgBbox.xmax-this.imgBbox.xmin}" height="${this.imgBbox.ymax-this.imgBbox.ymin}" fill="${this.backgroundColorBox.value}" />\n`}for(let i of this.nails)t+=`    <circle cx="${i.x}" cy="${i.y}" r="${NAIL_RADIUS}" fill="${NAIL_COLOR}" />\n`;for(let i=1;i<this.sequence.length;i++){let e=this.nails[this.sequence[i-1]],n=this.nails[this.sequence[i]];t+=`    <path d="M ${e.x} ${e.y} L ${n.x} ${n.y}" line-width="1" stroke="${this.GetLineColor()}" fill="none" />\n`}return t+="</svg>",t},StringArtGenerator.prototype.Save=function(){let t=this.saveTypeBox.value,i=document.createElement("a");"stringart"==t?(i.href=URL.createObjectURL(new Blob([this.ToStringArt()],{type:"application/json"})),i.download="art.stringart"):"png"==t?(i.href=this.canvas.toDataURL(),i.download="art.png"):"svg"==t&&(i.href=URL.createObjectURL(new Blob([this.ToSVG()],{type:"svg"})),i.download="art.svg"),i.click()},StringArtGenerator.prototype.SetScale=function(t,i,e){let n=(i-this.imgX)/this.imgScale,r=(e-this.imgY)/this.imgScale;this.imgScale=t,this.imgX=i-n*this.imgScale,this.imgY=e-r*this.imgScale};
//# sourceMappingURL=StringArtGenerator.5852ccd2.js.map
