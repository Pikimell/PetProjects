{"mappings":"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","sources":["src/string-art/js/stringAtrBot.js"],"sourcesContent":["const refs = {\n  formElem: document.querySelector(\".js-form\"),\n  canvas: document.querySelector(\"canvas\"),\n};\nconst ctx = refs.canvas.getContext(\"2d\");\nctx.lineWidth = 1;\nlet arrPoints = [];\n\nconst drawPoints = {\n  currentPoint: 0,\n};\n\nrefs.formElem.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  const data = e.target.elements.data.value;\n  loadData(data);\n});\ndocument.body.addEventListener(\"keydown\", (e) => {\n  if (e.code === \"Enter\") {\n    drawPoints.currentPoint = 0;\n    if (arrPoints.length === 0) {\n      arrPoints = JSON.parse(localStorage.getItem(\"dataPoint\"));\n      drawPoints.currentPoint = Number(localStorage.getItem(\"lastPoint\"));\n    }\n    draw();\n  } else if (e.code === \"KeyQ\") {\n    drawPoints.currentPoint--;\n    draw();\n  } else {\n    drawPoints.currentPoint++;\n    draw();\n  }\n});\n\nfunction saveData() {\n  localStorage.setItem(\"points\", JSON.stringify(drawPoints));\n  localStorage.setItem(\"lastPoint\", drawPoints.currentPoint);\n}\nfunction loadData(dataString) {\n  arrPoints = dataString.split(\"\\n\");\n  localStorage.setItem(\"dataPoint\", JSON.stringify(arrPoints));\n  localStorage.setItem(\"lastPoint\", 0);\n}\n\nfunction draw() {\n  saveData();\n  const prevPoint = +(arrPoints[drawPoints.currentPoint - 1] || 0);\n  const currentPoint = +(arrPoints[drawPoints.currentPoint] || 0);\n  const nextPoint = +(arrPoints[drawPoints.currentPoint + 1] || 0);\n\n  // drawLine(\n  //   ctx,\n  //   currentPoint,\n  //   nextPoint,\n  //   300,\n  //   { x: refs.canvas.width / 2, y: refs.canvas.height / 2 },\n  //   refs.canvas.width / 2 - 5\n  // );\n  ctx.clearRect(0, 0, refs.canvas.width, refs.canvas.height);\n  drawCircle(\n    ctx,\n    refs.canvas.width / 2 - 5,\n    300,\n    { x: refs.canvas.width / 2, y: refs.canvas.height / 2 },\n    prevPoint,\n    currentPoint,\n    nextPoint\n  );\n\n  drawText(\n    ctx,\n    prevPoint,\n    {\n      x: refs.canvas.width / 2,\n      y: refs.canvas.height / 2 - 200,\n    },\n    40\n  );\n  drawText(ctx, currentPoint, {\n    x: refs.canvas.width / 2,\n    y: refs.canvas.height / 2,\n  });\n  drawText(\n    ctx,\n    nextPoint,\n    {\n      x: refs.canvas.width / 2,\n      y: refs.canvas.height / 2 + 200,\n    },\n    40\n  );\n}\n\nfunction drawText(ctx, point, { x, y }, font = 100) {\n  ctx.fillStyle = \"black\";\n  ctx.font = `${font}px serif`;\n  ctx.textAlign = \"center\";\n  ctx.fillText(point, x, y);\n}\n\nfunction drawCircle(ctx, r, countPoint, center, ...points) {\n  const radian = (Math.PI * 2) / countPoint;\n\n  for (let i = 0; i < countPoint; i++) {\n    let angle = radian * i;\n    const endPoint = {\n      x: r * Math.sin(angle) + center.x,\n      y: r * Math.cos(angle) + center.y,\n    };\n\n    const minR = i % 10 == 0 ? 4 : 2;\n    ctx.fillStyle = \"black\";\n    ctx.beginPath();\n    ctx.ellipse(endPoint.x, endPoint.y, minR, minR, 0, 0, Math.PI * 2);\n    ctx.fill();\n  }\n\n  for (let i = 0; i < points.length; i++) {\n    let angle = radian * (countPoint - +points[i]);\n    // angle += Math.round(countPoint / 4);\n    const endPoint = {\n      x: r * Math.sin(angle) + center.x,\n      y: r * Math.cos(angle) + center.y,\n    };\n    let minR = 5;\n    switch (i) {\n      case 0:\n        ctx.fillStyle = \"green\";\n        break;\n      case 1:\n        ctx.fillStyle = \"red\";\n        minR = 15;\n        break;\n      case 2:\n        ctx.fillStyle = \"blue\";\n        break;\n    }\n\n    ctx.beginPath();\n    ctx.ellipse(endPoint.x, endPoint.y, minR, minR, 0, 0, Math.PI * 2);\n    ctx.fill();\n  }\n}\n\nfunction drawLine(ctx, currentPoint, nextPoint, countPoint, center, r) {\n  currentPoint -= 60;\n  nextPoint -= 60;\n\n  const radian = (Math.PI * 2) / countPoint;\n\n  const startPoint = {\n    x: r * Math.sin(radian * currentPoint) + center.x,\n    y: r * Math.cos(radian * currentPoint) + center.y,\n  };\n  const endPoint = {\n    x: r * Math.sin(radian * nextPoint) + center.x,\n    y: r * Math.cos(radian * nextPoint) + center.y,\n  };\n\n  ctx.beginPath(); // Start a new path\n  ctx.moveTo(startPoint.x, startPoint.y); // Move the pen to (30, 50)\n  ctx.lineTo(endPoint.x, endPoint.y); // Draw a line to (150, 100)\n  ctx.stroke();\n}\n"],"names":["refs","formElem","document","querySelector","canvas","ctx","getContext","lineWidth","arrPoints","drawPoints","currentPoint","saveData","localStorage","setItem","JSON","stringify","loadData","dataString","split","draw","prevPoint","nextPoint","clearRect","width","height","drawCircle","x","y","drawText","point","font","fillStyle","textAlign","fillText","r","countPoint","center","points","radian","Math","PI","i","angle","endPoint","sin","cos","minR","beginPath","ellipse","fill","i1","length","angle1","endPoint1","minR1","drawLine","startPoint","moveTo","lineTo","stroke","addEventListener","e","preventDefault","target","elements","data","value","body","code","parse","getItem","Number"],"version":3,"file":"StringArtBot.b7f45920.js.map"}