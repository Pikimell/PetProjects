{"mappings":"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","sources":["src/string-art/js/draw.js"],"sourcesContent":["StringArtGenerator.prototype.Clear = function(ctx) {\n    ctx.clearRect(0, 0, this.width, this.height)\n}\n\nStringArtGenerator.prototype.GetLightness = function(red, green, blue) {\n    return Math.floor(0.2126 * red + 0.7152 * green + 0.0722 * blue)\n}\n\nStringArtGenerator.prototype.LimitPixel = function(value) {\n    if (value < 0)\n        return 0\n\n    if (value > 255)\n        return 255\n\n    return Math.round(value)\n}\n\nStringArtGenerator.prototype.DrawForm = function() {\n    let formType = this.formTypeBox.value\n\n    this.ctx.strokeStyle = BORDER_COLOR\n    this.ctx.beginPath()\n\n    if (formType == CIRCLE_FORM) {\n        this.ctx.arc(this.x0, this.y0, this.radius + PADDING / 2, 0, Math.PI * 2)\n    }\n    else if (formType == RECT_FORM) {\n        this.ctx.rect(0, 0, this.width, this.height)\n    }\n    else if (formType == ALBUM_FORM) {\n        let height = this.width / Math.sqrt(2)\n        this.ctx.rect(0, (this.height - height) / 2, this.width, height)\n    }\n    else if (formType == PORTRAIT_FORM) {\n        let width = this.height / Math.sqrt(2)\n        this.ctx.rect((this.width - width) / 2, 0, width, this.height)\n    }\n    else if (formType == IMAGE_FORM) {\n        this.ctx.rect(0, 0, this.imgWidth, this.imgHeight)\n    }\n\n    this.ctx.fillStyle = this.backgroundColorBox.value\n    this.ctx.fill()\n}\n\nStringArtGenerator.prototype.DrawGrayScale = function() {\n    this.Clear(this.fakeCtx)\n    this.fakeCtx.drawImage(this.image, this.imgX, this.imgY, this.imgWidth * this.imgScale, this.imgHeight * this.imgScale)\n\n    let data = this.fakeCtx.getImageData(0, 0, this.width * this.dpr, this.height * this.dpr)\n    let pixels = data.data\n    let invert = this.invertBox.checked\n\n    for (let i = 0; i < pixels.length; i += 4) {\n        let lightness = this.GetLightness(pixels[i], pixels[i + 1], pixels[i + 2])\n\n        if (invert)\n            lightness = 255 - lightness\n\n        lightness = this.brightnessTable[lightness]\n        lightness = this.contrastTable[lightness]\n\n        pixels[i] = lightness\n        pixels[i + 1] = lightness\n        pixels[i + 2] = lightness\n    }\n\n    this.fakeCtx.putImageData(data, 0, 0)\n    this.ctx.drawImage(this.fakeCanvas, 0, 0, this.width, this.height)\n}\n\nStringArtGenerator.prototype.DrawLoadedImage = function() {\n    this.Clear(this.ctx)\n\n    this.ctx.save()\n    this.DrawForm()\n    this.ctx.clip()\n    this.DrawGrayScale()\n    this.ctx.stroke()\n    this.ctx.restore()\n}\n\nStringArtGenerator.prototype.DrawNails = function() {\n    this.DrawForm()\n    this.ctx.fillStyle = NAIL_COLOR\n\n    for (let nail of this.nails) {\n        this.ctx.beginPath()\n        this.ctx.arc(nail.x, nail.y, NAIL_RADIUS, 0, Math.PI * 2)\n        this.ctx.fill()\n    }\n}\n\nStringArtGenerator.prototype.DrawLine = function(nail1, nail2, lineColor) {\n    this.ctx.lineWidth = 1\n    this.ctx.strokeStyle = lineColor\n    this.ctx.beginPath()\n    this.ctx.moveTo(nail1.x, nail1.y)\n    this.ctx.lineTo(nail2.x, nail2.y)\n    this.ctx.stroke()\n}\n"],"names":["StringArtGenerator","prototype","Clear","ctx","clearRect","this","width","height","GetLightness","red","green","blue","Math","floor","LimitPixel","value","round","DrawForm","formType","formTypeBox","strokeStyle","BORDER_COLOR","beginPath","CIRCLE_FORM","arc","x0","y0","radius","PADDING","PI","RECT_FORM","rect","ALBUM_FORM","sqrt","PORTRAIT_FORM","IMAGE_FORM","imgWidth","imgHeight","fillStyle","backgroundColorBox","fill","DrawGrayScale","fakeCtx","drawImage","image","imgX","imgY","imgScale","data","getImageData","dpr","pixels","invert","invertBox","checked","i","length","lightness","brightnessTable","contrastTable","putImageData","fakeCanvas","DrawLoadedImage","save","clip","stroke","restore","DrawNails","NAIL_COLOR","nail","nails","x","y","NAIL_RADIUS","DrawLine","nail1","nail2","lineColor","lineWidth","moveTo","lineTo"],"version":3,"file":"StringArtGenerator.7246e897.js.map"}