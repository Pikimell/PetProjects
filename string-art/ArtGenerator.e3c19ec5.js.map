{"mappings":"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","sources":["src/string-art/js/string_art_generator.js"],"sourcesContent":["function StringArtGenerator(canvas) {\n  this.InitCanvas(canvas);\n  this.InitSelectButton();\n  this.InitControls();\n  this.InitSave();\n  this.InitEvents();\n}\n\nStringArtGenerator.prototype.SelectImage = function (e) {\n  let files = this.fileInput.files;\n\n  if (files.length != 1) return;\n\n  let image = new Image();\n  image.onload = () => this.LoadImage(image);\n  image.src = URL.createObjectURL(files[0]);\n\n  this.fileInput.value = \"\";\n};\n\nStringArtGenerator.prototype.LoadImage = function (image) {\n  this.image = image;\n  this.isLineDrawing = false;\n\n  this.Reset();\n\n  if (this.formType === undefined || this.formType == IMAGE_FORM) {\n    this.formType = this.formTypeBox.value;\n    this.InitNails();\n  }\n\n  this.generateBtn.removeAttribute(\"disabled\");\n};\n\nStringArtGenerator.prototype.UpdateForm = function () {\n  let needInitArt = this.formType != this.formTypeBox.value;\n  this.formType = this.formTypeBox.value;\n\n  this.InitBbox();\n  this.DrawLoadedImage();\n\n  if (needInitArt) this.InitNails();\n};\n\nStringArtGenerator.prototype.ToSignString = function (value) {\n  if (value > 0) return `+${value}`;\n\n  if (value < 0) return `-${-value}`;\n\n  return \"0\";\n};\n\nStringArtGenerator.prototype.UpdateContrast = function () {\n  let value = +this.contrastBox.value;\n  let contrast = 1 + value / 100;\n\n  this.contrastValue.innerHTML = this.ToSignString(value);\n  this.contrastTable = [];\n\n  for (let i = 0; i < 256; i++)\n    this.contrastTable[i] = this.LimitPixel((i - 128) * contrast + 128);\n};\n\nStringArtGenerator.prototype.UpdateSizePhoto = function (value) {\n  if (!value) value = this.sizeBoxElem.value;\n  this.sizeValueElem.textContent = value;\n};\n\nStringArtGenerator.prototype.UpdateBrightness = function () {\n  let value = +this.brightnessBox.value;\n  let brightness = 1 + value / 100;\n\n  this.brightnessValue.innerHTML = this.ToSignString(+this.brightnessBox.value);\n  this.brightnessTable = [];\n\n  for (let i = 0; i < 256; i++)\n    this.brightnessTable[i] = this.LimitPixel(i * brightness);\n};\n\nStringArtGenerator.prototype.UpdateWeight = function () {\n  let value = +this.linesWeightBox.value;\n  this.linesWeightValue.innerHTML = `${value}%`;\n};\n\nStringArtGenerator.prototype.GetPixels = function () {\n  this.pixelCtx.drawImage(this.canvas, 0, 0, this.width, this.height);\n  let data = this.pixelCtx.getImageData(0, 0, this.width, this.height).data;\n  let pixels = [];\n\n  for (let i = 0; i < data.length; i += 4)\n    pixels.push(this.GetLightness(data[i], data[i + 1], data[i + 2]));\n\n  return pixels;\n};\n\nStringArtGenerator.prototype.GetLineLightness = function (line) {\n  let lightness = 0;\n\n  for (let index of line) lightness += this.pixels[index];\n\n  return lightness / line.size;\n};\n\nStringArtGenerator.prototype.GetNextNail = function (nail) {\n  let nextNail = nail;\n  let nextLine = null;\n  let minLightness = Infinity;\n\n  for (let i = 0; i < this.nails.length; i++) {\n    if (i == nail) continue;\n\n    let line = this.LineRasterization(\n      this.nails[i].x,\n      this.nails[i].y,\n      this.nails[nail].x,\n      this.nails[nail].y\n    );\n    let lightness = this.GetLineLightness(line);\n\n    if (lightness < minLightness) {\n      minLightness = lightness;\n      nextNail = i;\n      nextLine = line;\n    }\n  }\n\n  return {\n    nail: nextNail,\n    line: nextLine,\n  };\n};\n\nStringArtGenerator.prototype.RemoveLine = function (line, lineWeight) {\n  for (let index of line)\n    this.pixels[index] = Math.min(\n      255,\n      this.pixels[index] + lineWeight * this.dpr\n    );\n};\n\nStringArtGenerator.prototype.TimeToString = function (delta) {\n  delta = Math.floor(delta);\n\n  let milliseconds = `${delta % 1000}`.padStart(3, \"0\");\n  let seconds = `${Math.floor(delta / 1000) % 60}`.padStart(2, \"0\");\n  let minutes = `${Math.floor(delta / 60000)}`.padStart(2, \"0\");\n\n  return `${minutes}:${seconds}.${milliseconds}`;\n};\n\nStringArtGenerator.prototype.ShowInfo = function (\n  linesCount,\n  totalCount,\n  startTime\n) {\n  let currTime = performance.now();\n  let time = this.TimeToString(currTime - startTime);\n  let lost = this.TimeToString(\n    ((currTime - startTime) / (totalCount - linesCount)) * linesCount\n  );\n  let avg = ((currTime - startTime) / (totalCount - linesCount)).toFixed(2);\n\n  this.infoBox.innerHTML = `<b>Осталось линий:</b> ${linesCount}<br>`;\n  this.infoBox.innerHTML += `<b>Прошло времени:</b> ${time}<br>`;\n  this.infoBox.innerHTML += `<b>Осталось времени:</b> ${lost}<br>`;\n  this.infoBox.innerHTML += `<b>Ср. время линии:</b> ${avg} мс`;\n};\n\nStringArtGenerator.prototype.GetActions = function () {\n  let actions = \"<b>Основные действия:</b><br>\";\n\n  if (\"ontouchstart\" in window) {\n    actions += \"<b>Масштабирование</b> - щипок<br>\";\n    actions += \"<b>Перемещение</b> - касание\";\n  } else {\n    actions += \"<b>Масштабирование</b> - скроллинг<br>\";\n    actions += \"<b>Перемещение</b> - левая кнопка мыши\";\n  }\n\n  return actions;\n};\n\nStringArtGenerator.prototype.GetLineWeight = function () {\n  return this.LimitPixel((+this.linesWeightBox.value / 100) * 255);\n};\n\nStringArtGenerator.prototype.GetLineColor = function () {\n  let color = this.linesColorBox.value;\n  let weight = this.GetLineWeight();\n\n  return `${color}${weight.toString(16).padStart(2, \"0\")}`;\n};\n\nStringArtGenerator.prototype.ResetImage = function () {\n  this.imgWidth = this.image.width;\n  this.imgHeight = this.image.height;\n  let aspectRatio = this.imgWidth / this.imgHeight;\n\n  if (this.imgWidth > this.imgHeight) {\n    this.imgWidth = this.width;\n    this.imgHeight = Math.round(this.width / aspectRatio);\n  } else {\n    this.imgHeight = this.height;\n    this.imgWidth = Math.round(this.imgHeight * aspectRatio);\n  }\n\n  this.imgX = 0;\n  this.imgY = 0;\n  this.imgScale = 1;\n\n  this.InitBbox();\n};\n\nStringArtGenerator.prototype.Reset = function (needResetImage = true) {\n  if (needResetImage) this.ResetImage();\n\n  this.saveBox.style.display = \"none\";\n  this.infoBox.innerHTML = this.GetActions();\n  this.isGenerating = false;\n  this.isLineDrawing = false;\n\n  for (let control of this.controls) control.removeAttribute(\"disabled\");\n\n  this.DrawLoadedImage();\n};\n\nStringArtGenerator.prototype.StartGenerate = function () {\n  this.isGenerating = !this.isGenerating;\n\n  if (!this.isGenerating) return;\n\n  this.saveBox.style.display = \"none\";\n  this.infoBox.innerHTML = \"\";\n\n  if (!this.isLineDrawing) {\n    this.sequence = [];\n    this.DrawLoadedImage();\n\n    this.pixels = this.GetPixels();\n    this.isLineDrawing = true;\n    this.Clear(this.ctx);\n    this.DrawNails();\n  }\n\n  for (let control of this.controls) control.setAttribute(\"disabled\", \"\");\n\n  this.generateBtn.value = \"Прервать\";\n};\n\nStringArtGenerator.prototype.EndGenerate = function () {\n  this.saveBox.style.display = \"\";\n  this.isGenerating = false;\n  this.generateBtn.value = \"Запустить\";\n\n  this.resetBtn.removeAttribute(\"disabled\");\n  this.selectBtn.removeAttribute(\"disabled\");\n  this.linesCountBox.removeAttribute(\"disabled\");\n};\n\nStringArtGenerator.prototype.GenerateIteration = function (\n  nail,\n  linesCount,\n  totalCount,\n  lineWeight,\n  lineColor,\n  startTime\n) {\n  this.sequence.push(nail);\n  if (this.isDraw) this.ShowInfo(linesCount, totalCount, startTime);\n\n  if (linesCount == 0 || !this.isGenerating) {\n    this.EndGenerate();\n    return;\n  }\n\n  let next = this.GetNextNail(nail);\n  this.RemoveLine(next.line, lineWeight);\n  if (this.isDraw)\n    this.DrawLine(this.nails[nail], this.nails[next.nail], lineColor);\n\n  window.requestAnimationFrame(() =>\n    this.GenerateIteration(\n      next.nail,\n      linesCount - 1,\n      totalCount,\n      lineWeight,\n      lineColor,\n      startTime\n    )\n  );\n};\n\nStringArtGenerator.prototype.Generate = function () {\n  this.StartGenerate();\n\n  let linesCount = +this.linesCountBox.value;\n  let lineWeight = this.GetLineWeight();\n  let lineColor = this.GetLineColor();\n  let startTime = performance.now();\n\n  this.GenerateIteration(\n    0,\n    linesCount,\n    linesCount,\n    lineWeight,\n    lineColor,\n    startTime\n  );\n};\n\nStringArtGenerator.prototype.ToStringArt = function () {\n  return JSON.stringify(\n    {\n      nails: this.nails,\n      color: this.GetLineColor(),\n      background: this.backgroundColorBox.value,\n      sequence: this.sequence,\n    },\n    null,\n    \"    \"\n  );\n};\n\nStringArtGenerator.prototype.ToTxt = function () {\n  let result = ``;\n  for (let elem of this.sequence) {\n    result += elem + `\\n`;\n  }\n  return result;\n};\n\nStringArtGenerator.prototype.ToSVG = function () {\n  let svg = `<svg viewBox=\"0 0 ${this.width} ${this.height}\" width=\"512\" height=\"512\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\\n`;\n\n  if (this.formType == CIRCLE_FORM) {\n    svg += `    <circle cx=\"${this.x0}\" cy=\"${this.y0}\" r=\"${\n      this.radius + PADDING / 2\n    }\" fill=\"${this.backgroundColorBox.value}\" />\\n`;\n  } else {\n    let x = this.imgBbox.xmin;\n    let y = this.imgBbox.ymin;\n    let width = this.imgBbox.xmax - this.imgBbox.xmin;\n    let height = this.imgBbox.ymax - this.imgBbox.ymin;\n\n    svg += `    <rect x=\"${x}\" y=\"${y}\" width=\"${width}\" height=\"${height}\" fill=\"${this.backgroundColorBox.value}\" />\\n`;\n  }\n\n  for (let nail of this.nails)\n    svg += `    <circle cx=\"${nail.x}\" cy=\"${nail.y}\" r=\"${NAIL_RADIUS}\" fill=\"${NAIL_COLOR}\" />\\n`;\n\n  for (let i = 1; i < this.sequence.length; i++) {\n    let p1 = this.nails[this.sequence[i - 1]];\n    let p2 = this.nails[this.sequence[i]];\n\n    svg += `    <path d=\"M ${p1.x} ${p1.y} L ${p2.x} ${\n      p2.y\n    }\" line-width=\"1\" stroke=\"${this.GetLineColor()}\" fill=\"none\" />\\n`;\n  }\n\n  svg += \"</svg>\";\n\n  return svg;\n};\n\nStringArtGenerator.prototype.Save = function () {\n  let type = this.saveTypeBox.value;\n  let link = document.createElement(\"a\");\n\n  if (type == \"stringart\") {\n    link.href = URL.createObjectURL(\n      new Blob([this.ToStringArt()], { type: \"application/json\" })\n    );\n    link.download = \"art.stringart\";\n  } else if (type == \"save\") {\n    localStorage.setItem(\"dataPoint\", JSON.stringify(this.ToTxt().split(\"\\n\")));\n    return;\n  } else if (type == \"png\") {\n    link.href = this.canvas.toDataURL();\n    link.download = \"art.png\";\n  } else if (type == \"svg\") {\n    link.href = URL.createObjectURL(new Blob([this.ToSVG()], { type: \"svg\" }));\n    link.download = \"art.svg\";\n  } else if (type == \"txt\") {\n    link.href = URL.createObjectURL(\n      new Blob([this.ToTxt()], { type: \"text/plain;charset=utf-8\" })\n    );\n    link.download = \"art.txt\";\n  }\n\n  link.click();\n};\n\nStringArtGenerator.prototype.SetScale = function (scale, x, y) {\n  let dx = (x - this.imgX) / this.imgScale;\n  let dy = (y - this.imgY) / this.imgScale;\n\n  this.imgScale = scale;\n  this.imgX = x - dx * this.imgScale;\n  this.imgY = y - dy * this.imgScale;\n};\n"],"names":["StringArtGenerator","canvas","this","InitCanvas","InitSelectButton","InitControls","InitSave","InitEvents","prototype","SelectImage","e","files","fileInput","length","image","Image","onload","LoadImage","src","URL","createObjectURL","value","isLineDrawing","Reset","undefined","formType","IMAGE_FORM","formTypeBox","InitNails","generateBtn","removeAttribute","UpdateForm","needInitArt","InitBbox","DrawLoadedImage","ToSignString","UpdateContrast","contrastBox","contrast","contrastValue","innerHTML","contrastTable","i","LimitPixel","UpdateSizePhoto","sizeBoxElem","sizeValueElem","textContent","UpdateBrightness","brightness","brightnessBox","brightnessValue","brightnessTable","UpdateWeight","linesWeightBox","linesWeightValue","GetPixels","pixelCtx","drawImage","width","height","data","getImageData","pixels","push","GetLightness","GetLineLightness","line","lightness","index","size","GetNextNail","nail","nextNail","nextLine","minLightness","Infinity","nails","LineRasterization","x","y","RemoveLine","lineWeight","Math","min","dpr","TimeToString","delta","milliseconds","floor","padStart","seconds","ShowInfo","linesCount","totalCount","startTime","currTime","performance","now","time","lost","avg","toFixed","infoBox","GetActions","actions","window","GetLineWeight","GetLineColor","linesColorBox","toString","ResetImage","imgWidth","imgHeight","aspectRatio","round","imgX","imgY","imgScale","needResetImage","saveBox","style","display","isGenerating","control","controls","StartGenerate","sequence","Clear","ctx","DrawNails","setAttribute","EndGenerate","resetBtn","selectBtn","linesCountBox","GenerateIteration","lineColor","isDraw","next","DrawLine","requestAnimationFrame","Generate","ToStringArt","JSON","stringify","color","background","backgroundColorBox","ToTxt","result","elem","ToSVG","svg","CIRCLE_FORM","x0","y0","radius","PADDING","imgBbox","xmin","ymin","xmax","ymax","NAIL_RADIUS","NAIL_COLOR","p1","p2","Save","type","saveTypeBox","link","document","createElement","href","Blob","download","localStorage","setItem","split","toDataURL","click","SetScale","scale","dx","dy"],"version":3,"file":"ArtGenerator.e3c19ec5.js.map"}