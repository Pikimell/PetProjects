{"mappings":"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","sources":["src/string-art/js/init.js"],"sourcesContent":["StringArtGenerator.prototype.InitCanvas = function(canvas) {\n    this.canvas = canvas\n    this.ctx = this.canvas.getContext('2d')\n    this.width = this.canvas.clientWidth\n    this.height = this.canvas.clientHeight\n\n    this.dpr = window.devicePixelRatio || 1\n    this.canvas.width = this.width * this.dpr\n    this.canvas.height = this.height * this.dpr\n    this.ctx.scale(this.dpr, this.dpr)\n    this.canvas.style.width = this.width + \"px\"\n    this.canvas.style.height = this.height + \"px\"\n\n    this.fakeCanvas = document.createElement('canvas')\n    this.fakeCanvas.width = this.width * this.dpr\n    this.fakeCanvas.height = this.height * this.dpr\n    this.fakeCtx = this.fakeCanvas.getContext('2d')\n    this.fakeCtx.scale(this.dpr, this.dpr)\n\n    this.pixelCanvas = document.createElement('canvas')\n    this.pixelCanvas.width = this.width\n    this.pixelCanvas.height = this.height\n    this.pixelCtx = this.pixelCanvas.getContext('2d')\n\n    this.x0 = this.width / 2\n    this.y0 = this.height / 2\n    this.radius = Math.min(this.width, this.height) / 2 - PADDING\n}\n\nStringArtGenerator.prototype.InitSelectButton = function() {\n    this.fileInput = document.createElement('input')\n    this.fileInput.type = 'file'\n    this.fileInput.accept = 'image/*'\n    this.fileInput.addEventListener('change', (e) => this.SelectImage(e))\n\n    this.selectBtn = document.getElementById('select-btn')\n    this.selectBtn.addEventListener('click', () => this.fileInput.click())\n}\n\nStringArtGenerator.prototype.InitControls = function() {\n    this.dragDropBox = document.getElementById('drag-drop-box')\n    this.controlsBox = document.getElementById('controls-box')\n\n    this.formTypeBox = document.getElementById('form-type-box')\n    this.formTypeBox.addEventListener('change', () => this.UpdateForm())\n\n    this.invertBox = document.getElementById('invert-box')\n    this.invertBox.addEventListener('change', () => this.DrawLoadedImage())\n\n    this.contrastBox = document.getElementById('contrast-box')\n    this.contrastValue = document.getElementById('contrast-value')\n    this.contrastBox.addEventListener('input', () => this.UpdateContrast())\n    this.contrastBox.addEventListener('change', () => { this.UpdateContrast(); this.DrawLoadedImage() })\n\n    this.brightnessBox = document.getElementById('brightness-box')\n    this.brightnessValue = document.getElementById('brightness-value')\n    this.brightnessBox.addEventListener('input', () => this.UpdateBrightness())\n    this.brightnessBox.addEventListener('change', () => { this.UpdateBrightness(); this.DrawLoadedImage() })\n\n    this.nailsModeBox = document.getElementById('nails-mode-box')\n    this.nailsModeBox.addEventListener('change', () => this.InitNails())\n\n    this.nailsCountBox = document.getElementById('nails-count-box')\n    this.nailsCountBox.addEventListener('change', () => this.InitNails())\n\n    this.linesCountBox = document.getElementById('lines-count-box')\n\n    this.linesWeightBox = document.getElementById('lines-weight-box')\n    this.linesWeightBox.addEventListener('input', () => this.UpdateWeight())\n    this.linesWeightBox.addEventListener('change', () => this.UpdateWeight())\n    this.linesWeightValue = document.getElementById('lines-weight-value')\n\n    this.linesColorBox = document.getElementById('lines-color-box')\n\n    this.backgroundColorBox = document.getElementById('background-color-box')\n    this.backgroundColorBox.addEventListener('change', () => this.DrawLoadedImage())\n    this.backgroundColorBox.addEventListener('input', () => this.DrawLoadedImage())\n\n    this.infoBox = document.getElementById('info-box')\n\n    this.generateBtn = document.getElementById('generate-btn')\n    this.generateBtn.addEventListener('click', () => this.Generate())\n\n    this.resetBtn = document.getElementById('reset-btn')\n    this.resetBtn.addEventListener('click', () => this.Reset(!this.isLineDrawing))\n\n    this.statusBox = document.getElementById('status-box')\n\n    this.controls = [\n        this.selectBtn,\n        this.invertBox,\n        this.contrastBox,\n        this.brightnessBox,\n        this.formTypeBox,\n        this.nailsModeBox,\n        this.nailsCountBox,\n        this.linesCountBox,\n        this.linesWeightBox,\n        this.linesColorBox,\n        this.backgroundColorBox,\n        this.resetBtn\n    ]\n\n    this.UpdateContrast()\n    this.UpdateBrightness()\n}\n\nStringArtGenerator.prototype.InitSave = function() {\n    this.saveBox = document.getElementById('save-box')\n\n    this.saveTypeBox = document.getElementById('save-type-box')\n    this.saveBtn = document.getElementById('save-btn')\n    this.saveBtn.addEventListener('click', () => this.Save())\n}\n\nStringArtGenerator.prototype.InitEvents = function() {\n    this.canvas.addEventListener('mousedown', (e) => this.MouseDown(e))\n    this.canvas.addEventListener('mousemove', (e) => this.MouseMove(e))\n    this.canvas.addEventListener('mouseup', (e) => this.MouseUp(e))\n    this.canvas.addEventListener('mouseleave', (e) => this.MouseUp(e))\n    this.canvas.addEventListener('mousewheel', (e) => this.MouseWheel(e))\n    this.canvas.addEventListener('wheel', (e) => this.MouseWheel(e))\n\n    this.touches = []\n    this.canvas.addEventListener('touchstart', (e) => { this.TouchStart(e) })\n    this.canvas.addEventListener('touchmove', (e) => { this.TouchMove(e) })\n    this.canvas.addEventListener('touchend', (e) => { this.TouchEnd(e) })\n\n    let generator = document.getElementById('generator-box')\n    generator.addEventListener('dragover', (e) => this.DragOver(e))\n    generator.addEventListener('dragleave', (e) => this.DragLeave(e))\n    generator.addEventListener('drop', (e) => this.Drop(e))\n}\n\nStringArtGenerator.prototype.Interpolate = function(a, b, t) {\n    return a * t + b * (1 - t)\n}\n\nStringArtGenerator.prototype.GetCircleNail = function(t) {\n    let x = this.x0 + this.radius * Math.cos(t)\n    let y = this.y0 + this.radius * Math.sin(t)\n\n    return {x: x, y: y}\n}\n\nStringArtGenerator.prototype.GetRectNail = function(angle, x0, y0, width, height) {\n    let t = angle / (2 * Math.PI)\n    let aspectRatio = width / height\n    let t1 = 0.5 / (1 + aspectRatio)\n    let ts = [0, t1, 0.5, 0.5 + t1, 1]\n    let x, y\n\n    if (t < ts[1]) {\n        x = x0 + width / 2\n        y = this.Interpolate(y0 - height / 2, y0 + height / 2, (t - ts[0]) / (ts[1] - ts[0]))\n    }\n    else if (t < ts[2]) {\n        x = this.Interpolate(x0 - width / 2, x0 + width / 2, (t - ts[1]) / (ts[2] - ts[1]))\n        y = y0 + height / 2\n    }\n    else if (t < ts[3]) {\n        x = x0 - width / 2\n        y = this.Interpolate(y0 + height / 2, y0 - height / 2, (t - ts[2]) / (ts[3] - ts[2]))\n    }\n    else {\n        x = this.Interpolate(x0 + width / 2, x0 - width / 2, (t - ts[3]) / (ts[4] - ts[3]))\n        y = y0 - height / 2\n    }\n\n    return {x: x, y: y}\n}\n\nStringArtGenerator.prototype.InitBorderNails = function(nailsCount) {\n    let angle = 2 * Math.PI / nailsCount\n    let nails = []\n\n    for (let i = 0; i < nailsCount; i++) {\n        let nail = {x: 0, y: 0}\n        let t = i * angle\n\n        if (this.formType == CIRCLE_FORM) {\n            nail = this.GetCircleNail(t)\n        }\n        else if (this.formType == RECT_FORM) {\n            nail = this.GetRectNail(t, this.x0, this.y0, this.width - 2*PADDING, this.height - 2*PADDING)\n        }\n        else if (this.formType == ALBUM_FORM) {\n            let size = this.width - 2*PADDING\n            nail = this.GetRectNail(t, this.x0, this.y0, size, size / Math.sqrt(2))\n        }\n        else if (this.formType == PORTRAIT_FORM) {\n            let size = this.height - 2*PADDING\n            nail = this.GetRectNail(t, this.x0, this.y0, size / Math.sqrt(2), size)\n        }\n        else if (this.formType == IMAGE_FORM) {\n            let width = this.imgWidth - 2 * PADDING\n            let height = this.imgHeight - 2 * PADDING\n            nail = this.GetRectNail(t, this.imgWidth / 2, this.imgHeight / 2, width, height)\n        }\n\n        nail.x = Math.round(nail.x)\n        nail.y = Math.round(nail.y)\n\n        nails.push(nail)\n    }\n\n    return nails\n}\n\nStringArtGenerator.prototype.InitGridNails = function(nailsCount) {\n    let nails = []\n    let width = this.imgBbox.xmax - this.imgBbox.xmin\n    let height = this.imgBbox.ymax - this.imgBbox.ymin\n    let aspectRatio = width / height\n\n\n    let scale = this.formType == CIRCLE_FORM ? 2 / Math.sqrt(Math.PI) : 1\n    let wc = Math.round(Math.sqrt(nailsCount * aspectRatio * scale))\n    let hc = Math.round(Math.sqrt(nailsCount / aspectRatio * scale) * scale)\n\n    let x0 = (this.imgBbox.xmin + this.imgBbox.xmax) / 2\n    let y0 = (this.imgBbox.ymin + this.imgBbox.ymax) / 2\n\n    for (let i = 0; i < hc; i++) {\n        for (let j = 0; j < wc; j++) {\n            let x = this.Interpolate(this.imgBbox.xmin + PADDING, this.imgBbox.xmax - PADDING, j / (wc - 1))\n            let y = this.Interpolate(this.imgBbox.ymin + PADDING, this.imgBbox.ymax - PADDING, i / (hc - 1))\n\n            if (this.formType == CIRCLE_FORM) {\n                let dx = x - x0\n                let dy = y - y0\n\n                if (dx * dx + dy * dy > this.radius * this.radius)\n                    continue\n            }\n\n            nails.push({\n                x: Math.round(x),\n                y: Math.round(y)\n            })\n        }\n    }\n\n    return nails\n}\n\nStringArtGenerator.prototype.InitGridRandom = function(nailsCount) {\n    let nails = []\n\n    for (let i = 0; i < nailsCount; i++) {\n        let x, y\n\n        if (this.formType == CIRCLE_FORM) {\n            let t = Math.random() * 2 * Math.PI\n            let radius = this.radius * Math.sqrt(Math.random())\n\n            x = (this.imgBbox.xmin + this.imgBbox.xmax) / 2 + radius * Math.cos(t)\n            y = (this.imgBbox.ymin + this.imgBbox.ymax) / 2 + radius * Math.sin(t)\n        }\n        else {\n            x = this.imgBbox.xmin + Math.random() * (this.imgBbox.xmax - this.imgBbox.xmin)\n            y = this.imgBbox.ymin + Math.random() * (this.imgBbox.ymax - this.imgBbox.ymin)\n        }\n\n        nails.push({\n            x: Math.round(x),\n            y: Math.round(y)\n        })\n    }\n\n    return nails\n}\n\nStringArtGenerator.prototype.InitNails = function() {\n    let nailsMode =this.nailsModeBox.value\n    let nailsCount = +this.nailsCountBox.value\n    this.nails = []\n\n    if (nailsMode == BORDER_MODE) {\n        this.nails = this.InitBorderNails(nailsCount)\n    }\n    else if (nailsMode == GRID_MODE) {\n        this.nails = this.InitGridNails(nailsCount)\n    }\n    else if (nailsMode == RANDOM_MODE) {\n        this.nails = this.InitGridRandom(nailsCount)\n    }\n}\n\nStringArtGenerator.prototype.LineRasterization = function(x1, y1, x2, y2) {\n    let line = new Set()\n\n    let delta_x = Math.abs(x2 - x1)\n    let delta_y = Math.abs(y2 - y1)\n\n    let sign_x = Math.sign(x2 - x1)\n    let sign_y = Math.sign(y2 - y1)\n\n    let error = delta_x - delta_y\n\n    while (x1 != x2 || y1 != y2) {\n        line.add(y1 * this.width + x1)\n        error2 = error * 2\n\n        if (error2 > -delta_y) {\n            error -= delta_y\n            x1 += sign_x\n        }\n\n        if (error2 < delta_x) {\n            error += delta_x\n            y1 += sign_y\n        }\n    }\n\n    line.add(y2 * this.width + x2)\n    return line\n}\n\nStringArtGenerator.prototype.InitBbox = function() {\n    this.imgBbox = {\n        xmin: 0,\n        ymin: 0,\n        xmax: this.width,\n        ymax: this.height\n    }\n\n    if (this.formType == ALBUM_FORM) {\n        let height = Math.round(this.width / Math.sqrt(2))\n        this.imgBbox.ymin = Math.round((this.height - height) / 2)\n        this.imgBbox.ymax = this.imgBbox.ymin + height\n    }\n    else if (this.formType == PORTRAIT_FORM) {\n        let width = Math.round(this.height / Math.sqrt(2))\n        this.imgBbox.xmin = Math.round((this.width - width) / 2)\n        this.imgBbox.xmax = this.imgBbox.xmin + width\n    }\n    else if (this.formType == IMAGE_FORM) {\n        this.imgBbox.xmax = this.imgWidth\n        this.imgBbox.ymax = this.imgHeight\n    }\n\n    this.NormalizePoint()\n}"],"names":["StringArtGenerator","prototype","InitCanvas","canvas","this","ctx","getContext","width","clientWidth","height","clientHeight","dpr","window","devicePixelRatio","scale","style","fakeCanvas","document","createElement","fakeCtx","pixelCanvas","pixelCtx","x0","y0","radius","Math","min","PADDING","InitSelectButton","fileInput","type","accept","addEventListener","e","SelectImage","selectBtn","getElementById","click","InitControls","dragDropBox","controlsBox","formTypeBox","UpdateForm","invertBox","DrawLoadedImage","contrastBox","contrastValue","UpdateContrast","brightnessBox","brightnessValue","UpdateBrightness","nailsModeBox","InitNails","nailsCountBox","linesCountBox","linesWeightBox","UpdateWeight","linesWeightValue","linesColorBox","backgroundColorBox","infoBox","generateBtn","Generate","resetBtn","Reset","isLineDrawing","statusBox","controls","InitSave","saveBox","saveTypeBox","saveBtn","Save","InitEvents","MouseDown","MouseMove","MouseUp","MouseWheel","touches","TouchStart","TouchMove","TouchEnd","generator","DragOver","DragLeave","Drop","Interpolate","a","b","t","GetCircleNail","x","cos","y","sin","GetRectNail","angle","PI","t1","ts","InitBorderNails","nailsCount","nails","i","nail","formType","CIRCLE_FORM","RECT_FORM","ALBUM_FORM","size","sqrt","PORTRAIT_FORM","size1","IMAGE_FORM","imgWidth","imgHeight","round","push","InitGridNails","aspectRatio","imgBbox","xmax","xmin","ymax","ymin","wc","hc","j","dx","dy","InitGridRandom","random","nailsMode","value","BORDER_MODE","GRID_MODE","RANDOM_MODE","LineRasterization","x1","y1","x2","y2","line","Set","delta_x","abs","delta_y","sign_x","sign","sign_y","error","add","error2","InitBbox","NormalizePoint"],"version":3,"file":"StringArtGenerator.ea7a1acd.js.map"}